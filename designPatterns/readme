This project is created to provide understanding of design patterns.

What is design pattern:-
    Design pattern is a solution to commonly occurring problems in a software design. They are like pre made blue print which
    you can customize to solve design problems in your code.

SOLID principle in software design:- These are the design principles that needs to be consider while designing the software
1. Single responsibility principle -
        A class should have only one reason to change. i.e. A class should have only one job to do or one task or one purpose.
        Example :- com.patterns.solid.SingleResponsibilityViolation,
                    com.patterns.solid.SingleResponsibilityCorrect

2. Open/Closed principle -
        A class should be open for extension but closed for modification. Suppose if you have PaymentProcessor which contains
        code to process payment of credit card. In future if we want to add phonepe payment then if we add that code in same class
        then it is violation of open/closed principle. Instead we should write a parent interface PaymentProcessor and implement this
        using new new payment processor's. In this way its easy to add new payment methods without changing existing classes.
        Example :- com.patterns.solid.OpenClosedViolation,
                    com.patterns.solid.OpenClosedCorrect

3. Liskov substitution principle -
        It states that object of superclass can be replaced by object of sub class without affecting correctness of a program.
        Example :- com.patterns.solid.LiskovSubstitutionCorrect,
                    com.patterns.solid.LiskovSubstitutionViolation

4. Interface segregation principle -
        This principle states that interface should be segregated properly. This principle is similar to single responsibility principle.
        One interface should not contain all the method just for the sake of having. It should have only required and relevant methods.
        Methods should be segregated in multiple interfaces as per requirement.
        Example :- com.patterns.solid.InterfaceSegregationViolation,
                    com.patterns.solid.InterfaceSegregationCorrect

5. Dependency Inversion Principle -
        It states that high level module should not depend on low level module, Both should depend on abstraction.
        Example :- com.patterns.solid.DependencyInversionViolation,
                    com.patterns.solid.DependencyInversionCorrect

--------------------------------------------------------------

There are 3 categories of design patterns:-

https://www.digitalocean.com/community/tutorials/java-design-patterns-example-tutorial

1. Creational design pattern -
        Creational design pattern gives us best possible way to instantiate an object in a specific situation.

        1. Singleton design pattern :- Singleton design pattern restricts instantiation of an object. It allows only one instance of a class
            inside a java virtual machine.
            Example :- com.patterns.creational.singleton.EagerInitialization,
                        com.patterns.creational.singleton.EagerInitializationIssueExample,
                        com.patterns.creational.singleton.StaticBlockInitialization,
                        com.patterns.creational.singleton.LazyInitialization,
                        com.patterns.creational.singleton.ThreadSafeInitialization,
                        com.patterns.creational.singleton.StaticInnerClassInitialization

            Reflection, Deserialization and cloning are 3 ways to broke singleton.

            Reflection :- In reflection we can make constructor accessible by making it's visibility true.
                          To overcome reflection issue we can use Enum or we can throw Exception from constructor if instance variable is not null.

            Deserialization :- When we do deserialization of serialized object it creates new object.
                            To overcome this issue we can use "readResolve" method.

            Cloning :- In cloning we can create clone of a object using clone method.
                        We can overcome this using overriding clone method and throwing "clone not supported Exception".

            Example :- com.patterns.creational.singleton.FinalSingleton